{"version":3,"sources":["components/cell/cell.styles.jsx","components/board/board.styles.jsx","components/cell/cell.component.jsx","components/board/board.component.jsx","components/game/game.styles.jsx","components/cool-button/cool-button.styles.jsx","components/cool-button/cool-button.component.jsx","services/WebSocketService.js","components/game/game.component.jsx","components/app/App.js","serviceWorker.js","index.js"],"names":["openButtonStyles","CellContainer","styled","div","content","flag","css","number","parseInt","color","explodeDuration","BoardContainer","rows","columns","size","tooBigBoardButtonStyles","Cell","shouldComponentUpdate","nextProps","props","this","onButtonClick","x","y","otherProps","onClick","React","Component","Board","flags","squares","gameOver","length","rowSize","colSize","buttons","reduce","acc","row","i","Object","assign","concat","map","cell","j","isBomb","setTimeout","document","getElementsByName","forEach","el","classList","remove","EXPLODE_DURATION","key","name","className","onContextMenu","evt","preventDefault","forceUpdate","BoardWrapperContainer","ConnectionStatusContainer","BoardHeaderContainer","body","clientWidth","BoardBodyContainer","GameContainer","MenuContainer","MessageContainer","span","base","white","CoolButtonContainer","CoolButton","text","ENDPOINT","WebSocketConnection","socket","debug","onOpen","console","log","onMessage","data","onClose","disconnect","close","send","WebSocket","onopen","onmessage","onclose","scope","listener","addEventListener","removeEventListener","Game","currentLevel","gameStarted","state","connectionStatus","message","componentDidMount","connection","WebSocketService","connect","on","connectionTime","Date","setState","command","split","paintMap","indexOf","substr","trim","setLevelAndStartGame","level","startGame","action","exitGame","title","hidden","style","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.dbb16fe7.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\r\n\r\nconst openButtonStyles = `\r\n  background: #e2e1e1;\r\n  border-radius: 0;\r\n  user-select: none;\r\n  pointer-events: none;\r\n  border: 1px solid gray;\r\n`;\r\n\r\nconst getExplodeEffect = ({ explodeDuration }) => css`\r\n  z-index: 999;\r\n  border: 1px solid gray;\r\n  box-shadow: 0 0 34px 30px rgb(255 0 0 / 40%), 0 0 34px 40px rgb(255 0 0 / 40%),\r\n    0 0 34px 60px rgb(255 0 0 / 40%), 0 0 34px 80px rgb(255 0 0 / 40%),\r\n    0 0 34px 150px rgb(255 0 0 / 40%), 0 0 34px 300px rgb(255 0 0 / 40%),\r\n    0 0 34px 500px rgb(255 0 0 / 40%), 0 0 34px 900px rgb(255 0 0 / 40%);\r\n  transition: ${explodeDuration || '0.5'}s ease-in-out;\r\n`;\r\n\r\nconst getContent = ({ content, flag }) => {\r\n  if (flag) {\r\n    return css`\r\n      &::after {\r\n        content: '‚ò†Ô∏è';\r\n      }\r\n    `;\r\n  }\r\n  const number = parseInt(content, 10);\r\n  if (content === '*') {\r\n    return css`\r\n      ${openButtonStyles}\r\n      &::after {\r\n        content: 'üí£';\r\n      }\r\n    `;\r\n  } else if (number) {\r\n    const color =\r\n      number === 1\r\n        ? 'blue'\r\n        : number === 2\r\n        ? '#673AB7'\r\n        : number === 3\r\n        ? 'green'\r\n        : number === 4\r\n        ? '#b409b'\r\n        : '#01ab0e';\r\n    return css`\r\n      ${openButtonStyles}\r\n      color: ${color};\r\n      &::after {\r\n        content: '${content}';\r\n      }\r\n    `;\r\n  } else if (number === 0) {\r\n    return css`\r\n      ${openButtonStyles}\r\n    `;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const CellContainer = styled.div`\r\n  border-radius: 3px;\r\n  -moz-border-radius: 3px;\r\n  -webkit-border-radius: 3px;\r\n  padding: 0;\r\n  background: #ff4655;\r\n  border: 1px solid #f3f3f3;\r\n\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n\r\n  ${getContent}\r\n\r\n  &.explode {\r\n    ${getExplodeEffect}\r\n  }\r\n\r\n  &:active,\r\n  &:focus {\r\n    outline: none;\r\n    border: 1px solid #7e7d7d;\r\n  }\r\n`;\r\n","import styled, { css } from 'styled-components';\r\nimport { CellContainer } from '../cell/cell.styles';\r\nconst getBoardFlexAndSize = ({ rows, columns }) => {\r\n  let size = rows <= 10 ? '2' : rows <= 20 ? '1.5' : '1';\r\n  let tooBigBoardButtonStyles = null;\r\n  if (rows >= 30) {\r\n    tooBigBoardButtonStyles = css`\r\n      &::after {\r\n        font-size: 10px;\r\n        top: -8px;\r\n        position: relative;\r\n      }\r\n      &[name='bomb']::after {\r\n        font-size: 8px !important;\r\n        top: -8px;\r\n      }\r\n    `;\r\n  } else if (rows >= 20) {\r\n    tooBigBoardButtonStyles = css`\r\n      &[name='bomb']::after {\r\n        position: relative;\r\n        top: -3px !important;\r\n      }\r\n    `;\r\n  }\r\n  return css`\r\n    grid-template-rows: repeat(${rows}, ${size}rem);\r\n    grid-template-columns: repeat(${columns}, ${size}rem);\r\n\r\n    ${CellContainer} {\r\n      ${tooBigBoardButtonStyles}\r\n    }\r\n  `;\r\n};\r\nexport const BoardContainer = styled.div`\r\n  display: grid;\r\n  column-gap: 0;\r\n  row-gap: 0;\r\n  font-size: 16px;\r\n  background: white;\r\n  ${getBoardFlexAndSize}\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { CellContainer } from './cell.styles';\r\n\r\nclass Cell extends React.Component {\r\n  shouldComponentUpdate = nextProps => {\r\n    return (\r\n      this.props.content !== nextProps.content ||\r\n      this.props.flag !== nextProps.flag\r\n    );\r\n  };\r\n  render() {\r\n    const { onButtonClick, x, y, flag, ...otherProps } = this.props;\r\n\r\n    return (\r\n      <CellContainer\r\n        {...otherProps}\r\n        flag={flag}\r\n        onClick={() => {\r\n          if (flag) {\r\n            return;\r\n          }\r\n          return onButtonClick(x, y);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nCell.propTypes = {\r\n  onButtonClick: PropTypes.func,\r\n  x: PropTypes.number,\r\n  y: PropTypes.number,\r\n  flag: PropTypes.bool\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\n\r\nimport { BoardContainer } from './board.styles';\r\nimport Cell from '../cell/cell.component';\r\nconst CN_EXPLODE = 'explode';\r\nconst EXPLODE_DURATION = 1;\r\n\r\nclass Board extends React.Component {\r\n  flags = [];\r\n  onButtonClick = (x, y) => {\r\n    this.props.onButtonClick(`${x} ${y}`);\r\n  };\r\n\r\n  render() {\r\n    const { squares, gameOver } = this.props;\r\n    if (gameOver) {\r\n      this.flags = [];\r\n    }\r\n    if (!squares || squares.length === 0) {\r\n      return null;\r\n    }\r\n    const rowSize = squares.length;\r\n    let colSize = 0;\r\n    const buttons = squares.reduce((acc, row, i) => {\r\n      const columns = Object.assign([], row);\r\n      if (!colSize) {\r\n        colSize = columns.length;\r\n      }\r\n      acc = acc.concat(\r\n        columns.map((cell, j) => {\r\n          this.flags = this.flags || [];\r\n          this.flags[i] = this.flags[i] || [];\r\n          this.flags[i][j] = this.flags[i][j] || false;\r\n\r\n          const isBomb = cell === '*';\r\n          if (isBomb) {\r\n            setTimeout(() => {\r\n              document\r\n                .getElementsByName('bomb')\r\n                .forEach(el => el.classList.remove(CN_EXPLODE));\r\n            }, EXPLODE_DURATION * 800);\r\n          }\r\n          const flag = this.flags[i][j];\r\n          return (\r\n            <Cell\r\n              key={`${i}_${j}`}\r\n              x={j}\r\n              y={i}\r\n              flag={gameOver ? false : flag}\r\n              explodeDuration={EXPLODE_DURATION}\r\n              name={isBomb ? 'bomb' : 'cell'}\r\n              className={isBomb ? CN_EXPLODE : ''}\r\n              content={cell}\r\n              onButtonClick={this.onButtonClick}\r\n              onContextMenu={evt => {\r\n                evt.preventDefault();\r\n                this.flags[i][j] = !this.flags[i][j];\r\n                this.forceUpdate();\r\n              }}\r\n            />\r\n          );\r\n        })\r\n      );\r\n      return acc;\r\n    }, []);\r\n    return (\r\n      <BoardContainer rows={rowSize} columns={colSize} buttons={buttons}>\r\n        {buttons}\r\n      </BoardContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nexport const BoardWrapperContainer = styled.div`\r\n  border-radius: 10px;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  padding: 6px;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-direction: column;\r\n  -ms-flex-direction: column;\r\n  flex-direction: column;\r\n  background: #3e3e3e;\r\n  height: 100%;\r\n  -webkit-box-shadow: 1px 1px 2008px 17px rgb(255 58 74);\r\n  -moz-box-shadow: 1px 1px 2008px 17px rgb(255 58 74);\r\n  box-shadow: 1px 1px 2008px 17px rgb(255 58 74);\r\n`;\r\n\r\nexport const ConnectionStatusContainer = styled.div`\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 10px;\r\n  display: flex;\r\n  span {\r\n    color: white;\r\n    line-height: 0.4rem;\r\n  }\r\n  .status {\r\n    height: 0.6rem;\r\n    width: 0.6rem;\r\n    margin-right: 3px;\r\n    border-radius: 50%;\r\n\r\n    &.online {\r\n      background: green;\r\n    }\r\n    &.offline {\r\n      background: red;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BoardHeaderContainer = styled.div`\r\n  background: #3e3e3e;\r\n  padding: 10px 20px;\r\n  border-bottom: 1px solid gray;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  max-width: ${document.body.clientWidth}px;\r\n\r\n  button {\r\n    color: #f44336;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const BoardBodyContainer = styled.div`\r\n  border: 1px solid #3e3e3e;\r\n  padding: 2px;\r\n  background: #3e3e3e;\r\n`;\r\n\r\nexport const GameContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const MenuContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  h2 {\r\n    color: #ff4655;\r\n  }\r\n`;\r\n\r\nexport const MessageContainer = styled.span`\r\n  font-size: 1em;\r\n  color: orange;\r\n  max-width: 250px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nconst base = '#0f1923';\r\nconst white = '#ece8e1';\r\nconst pink = '#ff4655';\r\nconst height = '54px';\r\nconst transition = '0.3s ease-out all';\r\n\r\nexport const CoolButtonContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 240px;\r\n  height: ${height};\r\n  padding: 8px;\r\n  font-size: 0.8rem;\r\n  font-weight: 900;\r\n  color: ${pink};\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  text-decoration: none;\r\n  box-shadow: 0 0 0 1px inset rgba(${white}, 0.3);\r\n  cursor: pointer;\r\n\r\n  &.white:hover > p {\r\n    color: ${white};\r\n  }\r\n  &.white > p {\r\n    background: ${white};\r\n    color: ${base};\r\n    & span.base {\r\n      border: 1px solid transparent;\r\n    }\r\n  }\r\n  &.transparent:hover > p {\r\n    color: ${white};\r\n    & span.text {\r\n      box-shadow: 0 0 0 1px ${white};\r\n    }\r\n  }\r\n  &.transparent > p {\r\n    background: ${base};\r\n    color: ${white};\r\n    & span.base {\r\n      border: 1px solid ${white};\r\n    }\r\n  }\r\n  &:after,\r\n  &:before {\r\n    content: '';\r\n    width: 1px;\r\n    position: absolute;\r\n    height: 8px;\r\n    background: ${base};\r\n    left: 0;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n  &:before {\r\n    right: 0;\r\n    left: initial;\r\n  }\r\n  & p {\r\n    margin: 0;\r\n    height: ${height};\r\n    line-height: ${height};\r\n    box-sizing: border-box;\r\n    z-index: 1;\r\n    left: 0;\r\n    width: 100%;\r\n    position: relative;\r\n    overflow: hidden;\r\n    & span.base {\r\n      box-sizing: border-box;\r\n      position: absolute;\r\n      z-index: 2;\r\n      width: 100%;\r\n      height: 100%;\r\n      left: 0;\r\n      border: 1px solid ${pink};\r\n      &:before {\r\n        content: '';\r\n        width: 2px;\r\n        height: 2px;\r\n        left: -1px;\r\n        top: -1px;\r\n        background: ${base};\r\n        position: absolute;\r\n        transition: ${transition};\r\n      }\r\n    }\r\n    & span.bg {\r\n      left: -5%;\r\n      position: absolute;\r\n      background: ${pink};\r\n      width: 0;\r\n      height: 100%;\r\n      z-index: 3;\r\n      transition: ${transition};\r\n      transform: skewX(-10deg);\r\n    }\r\n    & span.text {\r\n      z-index: 4;\r\n      width: 100%;\r\n      height: 100%;\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      &:after {\r\n        content: '';\r\n        width: 4px;\r\n        height: 4px;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: ${base};\r\n        position: absolute;\r\n        transition: ${transition};\r\n        z-index: 5;\r\n      }\r\n    }\r\n  }\r\n  &:hover {\r\n    color: ${white};\r\n    & span.bg {\r\n      width: 110%;\r\n    }\r\n    & span.text:after {\r\n      background: ${white};\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { CoolButtonContainer } from './cool-button.styles';\r\n\r\nconst CoolButton = ({ text, onButtonClick}) => (\r\n  <CoolButtonContainer onClick={onButtonClick}>\r\n    <p>\r\n      <span className='bg'></span>\r\n      <span className='base'></span>\r\n      <span className='text'>{text}</span>\r\n    </p>\r\n  </CoolButtonContainer>\r\n);\r\nexport default CoolButton;\r\n","const ENDPOINT = 'wss://hometask.eg1236.com/game1/';\r\nconst DEFAULT_COLOR = 'color: blue;';\r\nclass WebSocketConnection {\r\n  socket = null;\r\n  debug = true;\r\n  connect() {\r\n    if (this.debug) {\r\n      console.log(`%copening connection to ${ENDPOINT}`, DEFAULT_COLOR);\r\n    }\r\n    this.socket = new WebSocket(ENDPOINT);\r\n    this.socket.onopen = this.onOpen;\r\n    this.socket.onmessage = this.onMessage;\r\n    this.socket.onclose = this.onClose;\r\n  }\r\n  onOpen = () => {\r\n    if (this.debug) {\r\n      console.log('%c you are online!', 'color: green');\r\n    }\r\n  };\r\n\r\n  onMessage = data => {\r\n    if (this.debug) {\r\n      console.log('%cincoming message', DEFAULT_COLOR, data);\r\n    }\r\n  };\r\n  onClose = () => {\r\n    if (this.debug) {\r\n      console.log('%cbye bye', 'color: red');\r\n    }\r\n  };\r\n  disconnect = () => {\r\n    if (this.debug) {\r\n      console.log(`%cdisconnecting from ${ENDPOINT}`, DEFAULT_COLOR);\r\n    }\r\n    this.socket.close();\r\n  };\r\n\r\n  send = data => {\r\n    if (this.debug) {\r\n      console.log('%csending', DEFAULT_COLOR, data);\r\n    }\r\n    this.socket.send(data);\r\n  };\r\n  on(scope, listener) {\r\n    this.socket.addEventListener(scope, listener);\r\n  }\r\n  un(scope, listener) {\r\n    this.socket.removeEventListener(scope, listener);\r\n  }\r\n}\r\n\r\nexport default WebSocketConnection;\r\n","import React from 'react';\r\nimport Board from '../board/board.component';\r\n\r\nimport {\r\n  MenuContainer,\r\n  GameContainer,\r\n  MessageContainer,\r\n  BoardBodyContainer,\r\n  BoardHeaderContainer,\r\n  BoardWrapperContainer,\r\n  ConnectionStatusContainer\r\n} from './game.styles';\r\n\r\nimport CoolButton from '../cool-button/cool-button.component';\r\n\r\nimport WebSocketService from '../../services/WebSocketService';\r\n\r\nclass Game extends React.Component {\r\n  currentLevel = 1;\r\n  gameStarted = false;\r\n\r\n  state = {\r\n    map: [],\r\n    connectionStatus: 'offline',\r\n    gameOver: false,\r\n    message: ''\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.connection = new WebSocketService();\r\n    this.connection.connect();\r\n    this.connection.on('open', this.onOpen);\r\n    this.connection.on('close', this.onClose);\r\n    this.connection.on('message', this.onMessage);\r\n  };\r\n\r\n  onOpen = () => {\r\n    this.connectionTime = new Date();\r\n    this.setState({ connectionStatus: 'online' });\r\n  };\r\n\r\n  onClose = () => {\r\n    this.setState({ connectionStatus: 'offline' });\r\n  };\r\n\r\n  onMessage = message => {\r\n    const data = message.data;\r\n    const command = (data || '').split(':')[0];\r\n    switch (command) {\r\n      case 'map': {\r\n        this.paintMap(data);\r\n        break;\r\n      }\r\n      case 'open': {\r\n        if (data.indexOf('You lose') >= 0) {\r\n          console.log('%c Game Over!', 'color: red;');\r\n          this.setState({ gameOver: true });\r\n        } else if (data.indexOf('You win') >= 0) {\r\n          console.log('%c You won!', 'color: green;', data);\r\n          this.setState({ message: data.substr(6) });\r\n        }\r\n        break;\r\n      }\r\n      case 'help':\r\n      case 'new': {\r\n        break;\r\n      }\r\n      default: {\r\n        console.log(\r\n          '%c warning: command not handled yet',\r\n          'color: orange;',\r\n          command,\r\n          data\r\n        );\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  paintMap = data => {\r\n    if (data.indexOf('Not started') >= 0) {\r\n      this.gameStarted = false;\r\n      this.setState({ map: [] });\r\n      return;\r\n    }\r\n    const map = data.trim().substr(5).split('\\n');\r\n\r\n    this.setState({ map: map });\r\n  };\r\n\r\n  setLevelAndStartGame = level => {\r\n    this.currentLevel = level || '1';\r\n    this.startGame();\r\n  };\r\n\r\n  startGame = () => {\r\n    let level = this.currentLevel || '1';\r\n    this.setState({\r\n      gameOver: false,\r\n      map: [],\r\n      message: ''\r\n    });\r\n\r\n    this.gameStarted = true;\r\n    this.connection.send(`new ${level}`);\r\n    this.connection.send('map');\r\n  };\r\n\r\n  onButtonClick = action => {\r\n    if (this.state.gameOver) {\r\n      return;\r\n    }\r\n    this.connection.send(`open ${action}`);\r\n    this.connection.send('map');\r\n  };\r\n\r\n  exitGame = () => {\r\n    this.gameStarted = false;\r\n    this.setState({ map: [], gameOver: false });\r\n  };\r\n\r\n  render() {\r\n    const { map, gameOver, connectionStatus, message } = this.state;\r\n    return (\r\n      <div>\r\n        <ConnectionStatusContainer\r\n          title={`You are connected since: ${this.connectionTime}`}\r\n        >\r\n          <div className={`status ${connectionStatus}`} />\r\n          <span>{connectionStatus}</span>\r\n        </ConnectionStatusContainer>\r\n        <GameContainer>\r\n          {this.gameStarted ? (\r\n            <BoardWrapperContainer>\r\n              <BoardHeaderContainer>\r\n                <button onClick={this.exitGame}>Main Menu</button>\r\n                <button onClick={this.startGame} hidden={!gameOver}>\r\n                  Restart game\r\n                </button>\r\n                <MessageContainer hidden={!gameOver} style={{ color: 'red' }}>\r\n                  Game Over!\r\n                </MessageContainer>\r\n                <MessageContainer hidden={!message}>{message}</MessageContainer>\r\n              </BoardHeaderContainer>\r\n              <BoardBodyContainer>\r\n                <Board\r\n                  squares={map}\r\n                  onButtonClick={this.onButtonClick}\r\n                  gameOver={gameOver}\r\n                />\r\n              </BoardBodyContainer>\r\n            </BoardWrapperContainer>\r\n          ) : (\r\n            <MenuContainer>\r\n              <h2>Welcome to this WebSocket powered Minesweeper!</h2>\r\n              <h2>Pick your level to start</h2>\r\n              <CoolButton\r\n                text='Beginner'\r\n                onButtonClick={this.setLevelAndStartGame.bind(this, '1')}\r\n              />\r\n              <CoolButton\r\n                text='Intermediate'\r\n                onButtonClick={this.setLevelAndStartGame.bind(this, '2')}\r\n              />\r\n              <CoolButton\r\n                text='Master'\r\n                onButtonClick={this.setLevelAndStartGame.bind(this, '3')}\r\n              />\r\n              <CoolButton\r\n                text='King'\r\n                onButtonClick={this.setLevelAndStartGame.bind(this, '4')}\r\n              />\r\n            </MenuContainer>\r\n          )}\r\n        </GameContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from '../game/game.component';\r\n\r\nconst App = () => <Game />;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}